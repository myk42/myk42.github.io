---
import BaseLayout from "./BaseLayout.astro";
import { Calendar, User, Book, Tags } from "@lucide/astro";
import { formatDate } from "../scripts/date";

const { frontmatter } = Astro.props;
---

<BaseLayout title={frontmatter.title} description={frontmatter.description} type="article">
  <div class="post-grid">
    <article class="prose">
      <h1 class="mb-1">{frontmatter.title}</h1>
      <div class="post-meta not-prose">
        <time class="meta-text" datetime={formatDate(frontmatter.pubDate)}
          ><Calendar height={16} width={16} aria-hidden="true" />{formatDate(frontmatter.pubDate)}</time
        >
        <span class="meta-text opacity-60" aria-hidden="true">|</span>
        <span class="meta-text"><User height={16} width={16} aria-hidden="true" />{frontmatter.author}</span>
      </div>
      <hr class="not-prose" />
      <section class="post-body">
        <slot />
      </section>
      <hr class="not-prose" />
      <div class="post-tags">
        <span class="post-tags-title">
          <Tags height={16} width={16} class="text-accent" aria-hidden="true" />
          Tags
        </span>
        <nav aria-label="Post tags">
          <ul class="post-tags-list list-none pl-0 m-0">
            {
              frontmatter.tags?.map((tag: string) => (
                <li>
                  <a
                    href={`/tags/${encodeURIComponent(tag)}`}
                    rel="tag"
                    class="tag-link not-prose"
                    aria-label={`${tag} post tag`}
                    title={`#${tag}`}>
                    #{tag}
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </div>
    </article>
    <aside>
      <div class="toc-container">
        <span class="toc-title" role="heading" aria-level="2">
          <Book height={16} width={16} class="text-outline" aria-hidden="true" />Table of Contents
        </span>
        <nav id="toc" class="mb-4" aria-label="Table of Contents"></nav>
      </div>
    </aside>
  </div>
</BaseLayout>

<script is:inline data-astro-rerun>
  // Adapted from: https://github.com/satnaing/astro-paper/blob/main/src/layouts/PostDetails.astro
  (function createProgressBar() {
    const progressWrapper = document.createElement("div");
    const progressBar = document.createElement("div");

    progressWrapper.className = "progress-container";
    progressBar.className = "progress-bar";

    progressWrapper.appendChild(progressBar);
    document.body.appendChild(progressWrapper);

    function onScroll() {
      const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrolled = (scrollTop / scrollHeight) * 100;
      progressBar.style.width = scrolled + "%";
    }

    window.addEventListener("scroll", onScroll, { passive: true });
  })();

  (function addHeadingLinks() {
    const headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    const toc = document.querySelector("#toc");
    const list = toc ? document.createElement("ul") : null;

    for (const heading of headings) {
      // Create heading links
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className = "ms-2 no-underline opacity-75 md:opacity-0 md:group-hover:opacity-100 md:focus:opacity-100";
      link.href = "#" + heading.id;
      link.setAttribute("aria-label", "Link to section " + heading.textContent?.trim());
      link.innerHTML = `<span aria-hidden="true">#</span>`;
      heading.appendChild(link);

      // Generate TOC links
      if (list) {
        const li = document.createElement("li");
        const link = document.createElement("a");
        const level = parseInt(heading.tagName.substring(1), 10);

        list.className = "toc-list";
        link.href = "#" + heading.id;
        link.setAttribute("aria-label", "Link to section " + heading.textContent?.trim());
        link.textContent = heading.cloneNode(true).childNodes[0].textContent?.trim();
        link.className = "toc-link";

        li.className =
          level === 3 ? "pl-3" : level === 4 ? "pl-6" : level === 5 ? "pl-8" : level === 6 ? "pl-10" : "pl-0";

        li.appendChild(link);
        list.appendChild(li);
      }
    }
    if (toc && list) toc.appendChild(list);
  })();

  (function attachCopyButtons() {
    const preBlocks = Array.from(document.querySelectorAll("pre"));
    if (!preBlocks.length) return;

    const copyIcon = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
           fill="none" stroke="currentColor" stroke-width="2"
           stroke-linecap="round" stroke-linejoin="round"
           class="w-3 h-3">
        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
      </svg>`;

    const checkIcon = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"
           fill="none" stroke="currentColor" stroke-width="2"
           stroke-linecap="round" stroke-linejoin="round"
           class="w-3 h-3">
        <path d="M20 6 9 17l-5-5"></path>
      </svg>`;

    for (const pre of preBlocks) {
      const wrapper = document.createElement("div");
      const btn = document.createElement("button");

      wrapper.style.position = "relative";
      pre.parentNode?.insertBefore(wrapper, pre);
      wrapper.appendChild(pre);

      btn.type = "button";
      btn.className = "code-btn";
      btn.setAttribute("aria-label", "Copy code to clipboard");
      btn.innerHTML = `${copyIcon}<span>Copy</span>`;

      pre.setAttribute("tabindex", "0");
      pre.appendChild(btn);

      btn.addEventListener("click", async () => {
        const code = pre.querySelector("code")?.innerText ?? "";
        try {
          await navigator.clipboard.writeText(code);
          btn.innerHTML = `${checkIcon}<span>Copied</span>`;
          setTimeout(() => {
            btn.innerHTML = `${copyIcon}<span>Copy</span>`;
          }, 800);
        } catch {
          // Do nothing
        }
      });
    }
  })();

  document.addEventListener("astro:after-swap", () => window.scrollTo({ left: 0, top: 0, behavior: "instant" }));
</script>
